{"meta":{"title":"刘雪荣的个人博客","subtitle":"技术与生活","description":"前端之路","author":"kala","url":"https://github.com/liuxuerong/liuxuerong.github.io"},"pages":[],"posts":[{"title":"我的第一篇博客","slug":"my-new-post","date":"2017-06-27T14:42:11.000Z","updated":"2017-06-27T14:49:37.188Z","comments":true,"path":"2017/06/27/my-new-post/","link":"","permalink":"https://github.com/liuxuerong/liuxuerong.github.io/2017/06/27/my-new-post/","excerpt":"","text":"Git笔记使用命令+文字描述以下过程：实现在桌面中创建一个git项目，在项目中添加文件，并提交到本地仓库的操作步骤mkdir appcd appgit init //只能对当前文件夹进行初始化操作touch 1.htmlgit add .git commit -m 添加了1.html文件 //–&gt;备注信息一定要写，如果忘了写备注信息，会进入vi编辑器，输入备注信息并保存退出，才能正确的提交 //–&gt;-m 备注信息：一定要把-m和备注信息之间留有空格，否则将会提示 -m备注信息 这个选项不存在 在公司里面，我自己在github中创建了一个空仓库，为了把本地代码上传到这个仓库中，我应该执行哪些操作mkdir appcd appgit init //只能对当前文件夹进行初始化操作touch 1.htmlgit add .git commit -m 添加了1.html文件git push 服务器地址 master (最重要)在公司里面，领导让我对某个github的项目进行二次开发(2+次开发)，比如我要开发一个新功能(比如添加test.html文件)，我应该执行哪些步骤从而将test.html文件提交到服务器中//1、mkdir appcd appgit initgit pull 服务器仓库 mastertouch 1.htmlgit add .git commit -m 添加了1.html文件git push 服务器地址 master //2、git clone 服务器仓库地址 app2(本地文件夹名称)cd app2touch 1.htmlgit add .git commit -m 添加了1.html文件git push 服务器地址 master 如果当前位于cart分支，我需要将cart分支合并到master分支，我应该执行哪些操作 git checkout master git merge cart -m 备注信息 命令默写想要查看分支切换的操作日志，通过什么命令可以实现？ git reflog 版本回滚 git log –oneline：获取版本号 git reset –hard 版本号 创建新分支 git branch 分支名 删除某个分支 git branch -d 分支名 切换分支 git checkout 分支名 分支合并 git merge -m 备注信息 查看所有分支–&gt;并说明如何辨别当前位于哪个分支 git branch 带*号前缀的就是当前分支 Git补充分支 如果某个git仓库从来没有commit过，将不会产生分支 git branch 不会有任何输出 (了解)分支仓库和master仓库只有在文件commit之后才会有反应 当一个文件还位于工作区或者暂存区的时候，切换分支对该文件不会产生任何影响 只有当该文件commit之后，在哪个分支仓库中commit，该文件就会出现在该分支仓库中 git init 文件夹名称：可以初始化指定的文件夹如果git push的时候发现失败，可能就是产生了冲突 git pull：更新服务器代码，告诉你有文件冲突 找到该文件，对该文件进行对比（通过tortoiseGit图形化工具：diff查看文件变化、edit conflicts编辑冲突的文件并保存） 重新把该文件放到暂存区–&gt;commit，最后重新push到服务器仓库 git操作应该规范，不要进行一些反人类操作 设置用户名和邮箱，不要在提交代码之后重新修改了用户名和邮箱 文件忽略：应该在创建该文件的时候，直接把它忽略掉，而不是先添加到仓库中，那样会很麻烦 对一个项目二次开发，应该git clone要么git init+git pull","categories":[{"name":"blog","slug":"blog","permalink":"https://github.com/liuxuerong/liuxuerong.github.io/categories/blog/"}],"tags":[{"name":"博客 总结","slug":"博客-总结","permalink":"https://github.com/liuxuerong/liuxuerong.github.io/tags/博客-总结/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-06-27T12:29:23.467Z","updated":"2017-06-27T12:29:23.467Z","comments":true,"path":"2017/06/27/hello-world/","link":"","permalink":"https://github.com/liuxuerong/liuxuerong.github.io/2017/06/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}